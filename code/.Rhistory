(1.483*median(abs(residuals1 -median(residuals1) )))
(1.483*median(abs(residuals1 -mean(residuals1) )))
default_model_fit1 = Arima(Z ,order =c(0,1,1), seasonal = c(0,1,1),include.mean = F,  method = 'ML',  lambda = NULL)
plot_model_output( default_model_fit1, adj_inf_criteria_for_log = T)
?Arima
default_model_fit1 = Arima(Z ,order =c(0,1,1), seasonal = c(0,1,1),include.mean = F,  method = 'ML',  lambda = NULL, transform.pars = F)
plot_model_output( default_model_fit1, adj_inf_criteria_for_log = T)
plot_model_output( default_model_fit1, adj_inf_criteria_for_log = T)
std_residuals1 <- residuals1/(1.48*median(abs(residuals1 -mean(residuals1) )))
print(std_residuals1[which(std_residuals1>3.88)])
time(y)
time(y[2])
date(y)
date(y[]2)
date(y[3])
dates(y[3])
summary(y)
y
names(y)
time(y)
OA <- function(y, t_oa) {
as.integer(seq_along(y) == t_oa)
}
OA(y, 3)
seq_along(y)
LS <- function(y, t_ls) {
as.integer(seq_along(y) >= t_ls)
}
LS(y, 4)
LS <- function(y, t_ls) {
as.integer(seq_along(y) >= t_ls)-1
}
LS(y, 4)
Arima(Z, order = c(0,1,1), seasonal = c(0,1,1), xreg = X,
include.mean = FALSE, method = 'ML', fixed = coef(default_model_fit1)[c("ma1", "sma1")])
Arima(Z, order = c(0,1,1), seasonal = c(0,1,1), xreg = LS(Z, 5),
include.mean = FALSE, method = 'ML', fixed = coef(default_model_fit1)[c("ma1", "sma1")])
?arima
Arima(Z, order = c(0,1,1), seasonal = c(0,1,1), xreg = LS(Z, 5),
+                          include.mean = FALSE, method = 'ML', fixed = coef(default_model_fit1)[c("ma1", "sma1")])
Arima(Z, order = c(0,1,1), seasonal = c(0,1,1), xreg = LS(Z, 5), include.mean = FALSE, method = 'ML', fixed = coef(default_model_fit1)[c("ma1", "sma1")])
coef(default_model_fit1)
coef(default_model_fit1)[c("ma1", "sma1")]
coef(default_model_fit1)[c("ma1", "sma1")]
coef(default_model_fit1)[c("ma1", "sma1")]
coef(default_model_fit1)[c("ma1", "sma1")]
coef(default_model_fit1)[c("ma1", "sma1")]
Arima(Z, order = c(0,1,1), seasonal = c(0,1,1), xreg = LS(Z, 5), include.mean = FALSE, method = 'ML', fixed =c(0.1, 0.1))
Arima(Z, order = c(0,1,1), seasonal = c(0,1,1), xreg = LS(Z, 5), include.mean = FALSE, method = 'ML', fixed =c(0.1,rep(NA, 12), 0.1))
Arima(Z, order = c(0,1,1), seasonal = c(0,1,1), xreg = LS(Z, 5), include.mean = FALSE, method = 'ML', fixed =c(0.1,rep(NA, 11), 0.1))
Arima(Z, order = c(0,1,1), seasonal = c(0,1,1), xreg = LS(Z, 5), include.mean = FALSE, method = 'ML', fixed =c(0.1,rep(NA, 13), 0.1))
c(0.1,rep(NA, 13), 0.1)
Arima(Z, order = c(0,1,1), seasonal = c(0,1,1), xreg = LS(Z, 5), include.mean = FALSE, method = 'ML', fixed =c(0.1, 0.1))
default_model_fit1$coef
default_model_fit1$arma
default_model_fit1$code
default_model_fit1$model
default_model_fit1$model$phi
default_model_fit1$model$theta
Arima(Z, order = c(0,1,1), seasonal = c(0,1,1), xreg = LS(Z, 5), include.mean = FALSE, method = 'ML', fixed =default_model_fit1$model$theta)
# Sample data
# Time series
X <- LS(Z, 11)  # Two regressors
# Fit initial ARIMA model to get ARIMA coefficients
initial_arima <- Arima(Z, order = c(1,1,1), seasonal = c(0,1,1), include.mean = FALSE)
# Fixed ARIMA coefficients (ar1, ma1, sma1)
fixed <- c(NA, NA, coef(initial_arima)[c("ar1", "ma1", "sma1")])
# Fit RegARIMA model, fixing ARIMA parameters and estimating regression coefficients
reg_arima <- Arima(Z, order = c(1,1,1), seasonal = c(0,1,1), xreg = X, fixed = fixed)
# Sample data
# Time series
X <- cbind(LS(Z, 32), LS(Z, 50))  # Two regressors
# Fit initial ARIMA model to get ARIMA coefficients
initial_arima <- Arima(Z, order = c(1,1,1), seasonal = c(0,1,1), include.mean = FALSE)
# Fixed ARIMA coefficients (ar1, ma1, sma1)
fixed <- c(NA, NA, coef(initial_arima)[c("ar1", "ma1", "sma1")])
# Fit RegARIMA model, fixing ARIMA parameters and estimating regression coefficients
reg_arima <- Arima(Z, order = c(1,1,1), seasonal = c(0,1,1), xreg = X, fixed = fixed)
# Show estimated regression coefficients
coef(reg_arima)[c("x1", "x2")]
reg_arima
Arima(Z, order = c(0,1,1), seasonal = c(0,1,1), xreg = LS(Z, 5), include.mean = FALSE, method = 'ML', fixed = c(NA, coef(initial_arima)))
Arima(Z, order = c(0,1,1), seasonal = c(0,1,1), xreg = LS(Z, 5), include.mean = FALSE, method = 'ML', fixed = c(NA, coef(default_model_fit1)))
Arima(Z, order = c(0,1,1), seasonal = c(0,1,1), xreg = LS(Z, 45), include.mean = FALSE, method = 'ML', fixed = c(NA, coef(default_model_fit1)))
Arima(Z,xreg = LS(Z, 45),  order = c(0,1,1), seasonal = c(0,1,1), include.mean = FALSE, method = 'ML', fixed = c(NA, coef(default_model_fit1)))
residuals1 <- residuals(default_model_fit1)
coef(default_model_fit1)
Arima(Z,xreg = LS(Z, 45),  order = c(0,1,1), seasonal = c(0,1,1), include.mean = FALSE, method = 'ML', fixed = c(coef(default_model_fit1), NA))
default_model_fit1$call$y
default_model_fit1$x
default_model_fit1$model$V
dim(default_model_fit1$model$V)
dim(default_model_fit1$model$P)
dim(default_model_fit1$model$Pn)
dim(default_model_fit1$model$h)
default_model_fit1$model$h
Omega <- cov(residuals1)
residuals1
cov(residuals1)
source("~/Documents/Projects/X-13-ARIMA-SEATS-Model-for-Seasonal-Adjustment/code/helper_functions.r", echo=TRUE)
Z
5.266827
Z[127]
detect_outlier(default_model_fit1,127, "LS")
time(Z)
time(Z)[127]
time(Z)[128]
time(Z)[128]*12
round(2.1)
round(2.9)
trim(2.9)
floor(2.1)
floor(2.9)
floor(2.99999999999999)
get_time <- function(t){
return(c(floor(t), (t-floor(t))*12))
}
get_time <- function(t){
return(c(floor(t), (t-floor(t))*12))
}
detect_outlier <- function(default_model, t_outlier, type = c("AO", "LS")) {
type <- match.arg(type)
# Extract the time series and its starting time from the default model
y <- default_model$x
outlier_time <- time(y)[t_outlier]  # Find the time corresponding to the outlier index
# Get the year and month using the get_time function
time_parts <- get_time(outlier_time)
year <- time_parts[1]
month <- sprintf("%02d", time_parts[2])  # Format month to be 2 digits
# Create the name for the new variable based on outlier type and time
var_name <- paste0(type, year, ".", month)
# Generate the regression variable based on outlier type
reg_var <- if (type == "AO") OA(y, t_outlier) else LS(y, t_outlier)
names(reg_var) <- var_name  # Assign the dynamically created name to the variable
# Fit the RegARIMA model with the new regression variable
fit <- Arima(y, order = default_model$call$order,
seasonal = default_model$call$seasonal,
include.mean = FALSE, xreg = reg_var)
# Extract the coefficient and standard error for the outlier variable
coef_outlier <- coef(fit)[var_name]
se_outlier <- sqrt(diag(fit$var.coef))[var_name]
# Calculate the t-value
t_value <- coef_outlier / se_outlier
return(list(t_value = t_value, variable_name = var_name))
}
detect_outlier(default_model_fit1,127, "LS")
detect_outlier <- function(default_model, t_outlier, type = c("AO", "LS")) {
type <- match.arg(type)
# Extract the time series and its starting time from the default model
y <- default_model$x
outlier_time <- time(y)[t_outlier]  # Find the time corresponding to the outlier index
# Get the year and month using the get_time function
time_parts <- get_time(outlier_time)
year <- time_parts[1]
month <- sprintf("%02d", time_parts[2])  # Format month to be 2 digits
# Create the name for the new variable based on outlier type and time
var_name <- paste0(type, year, ".", month)
# Generate the regression variable based on outlier type
reg_var <- if (type == "AO") OA(y, t_outlier) else LS(y, t_outlier)
names(reg_var) <- var_name  # Assign the dynamically created name to the variable
# Fit the RegARIMA model with the new regression variable
fit <- Arima(y, order = default_model$call$order,
seasonal = default_model$call$seasonal,
include.mean = FALSE, xreg = reg_var,
include.mean = FALSE, method = 'ML',
fixed = c(coef(default_model_fit1), NA))
# Extract the coefficient and standard error for the outlier variable
coef_outlier <- coef(fit)[var_name]
se_outlier <- sqrt(diag(fit$var.coef))[var_name]
# Calculate the t-value
t_value <- coef_outlier / se_outlier
return(list(t_value = t_value, variable_name = var_name))
}
detect_outlier(default_model_fit1,127, "LS")
detect_outlier <- function(default_model, t_outlier, type = c("AO", "LS")) {
type <- match.arg(type)
# Extract the time series and its starting time from the default model
y <- default_model$x
outlier_time <- time(y)[t_outlier]  # Find the time corresponding to the outlier index
# Get the year and month using the get_time function
time_parts <- get_time(outlier_time)
year <- time_parts[1]
month <- sprintf("%02d", time_parts[2])  # Format month to be 2 digits
# Create the name for the new variable based on outlier type and time
var_name <- paste0(type, year, ".", month)
# Generate the regression variable based on outlier type
reg_var <- if (type == "AO") OA(y, t_outlier) else LS(y, t_outlier)
names(reg_var) <- var_name  # Assign the dynamically created name to the variable
# Fit the RegARIMA model with the new regression variable
fit <- Arima(y, order = default_model$call$order,
seasonal = default_model$call$seasonal,
include.mean = FALSE, xreg = reg_var,
method = 'ML',
fixed = c(coef(default_model_fit1), NA))
# Extract the coefficient and standard error for the outlier variable
coef_outlier <- coef(fit)[var_name]
se_outlier <- sqrt(diag(fit$var.coef))[var_name]
# Calculate the t-value
t_value <- coef_outlier / se_outlier
return(list(t_value = t_value, variable_name = var_name))
}
detect_outlier(default_model_fit1,127, "LS")
default_model_fit1$call$seasonal
Arima(default_model_fit1$x,xreg = LS(Z, 45),  order = default_model_fit1$call$order, seasonal = default_model_fit1$call$seasonal, include.mean = FALSE, method = 'ML', fixed = c(coef(default_model_fit1), NA))
default_model_fit1$call$order
default_model_fit1 = Arima(Z ,order =c(0,1,1), seasonal = c(0,1,1),include.mean = F,  method = 'ML',  lambda = NULL)
plot_model_output( default_model_fit1, adj_inf_criteria_for_log = T)
t.test(residuals(default_model_fit1))
Arima(default_model_fit1$x,xreg = LS(Z, 45),  order = default_model_fit1$call$order, seasonal = default_model_fit1$call$seasonal, include.mean = FALSE, method = 'ML', fixed = c(coef(default_model_fit1), NA))
detect_outlier(default_model_fit1,127, "LS")
Arima(default_model_fit1$x,xreg = LS(Z, 45),  order = default_model_fit1$call$order, seasonal = default_model_fit1$call$seasonal, include.mean = FALSE, method = 'ML', fixed = c(coef(default_model_fit1), NA))
Z
Arima(default_model_fit1$x,xreg = LS(Z, 45),  order = default_model_fit1$call$order, seasonal = default_model_fit1$call$seasonal, include.mean = FALSE, method = 'ML', fixed = c(coef(default_model_fit1), NA))
default_model_fit1$call$order
paste(default_model_fit1$call$order)
c(default_model_fit1$call$order)
default_model_fit1$call$order
as.numeric(default_model_fit1$call$order)
as.numeric(default_model_fit1$call$order)
default_model_fit1$call$order[1]
default_model_fit1$call$order[2]
default_model_fit1$call$order[3]
default_model_fit1$call$order[4]
default_model_fit1$call$order[5]
default_model_fit1$call$order[2]
default_model_fit1$call$order[2:5]
default_model_fit1$call$order[2:4]
default_model_fit1$call$order[1:4]
default_model_fit1$call$order[2:4]
default_model_fit1$call$order[2:3]
default_model_fit1$call$order[1:3]
default_model_fit1$call$order[2:3]
default_model_fit1$call$order[20
]
default_model_fit1$call$order[2]
default_model_fit1$call$order[3]
default_model_fit1$call$order[2:4]
c(default_model_fit1$call$order[2:4])
default_model_fit1$call$order[2:4]
default_model_fit1$call$order
default_model_fit1$call$order[-1]
default_model_fit1$call$order[-4]
default_model_fit1$call$order[0]
paste0(default_model_fit1$call$order)
paste0(default_model_fit1$call$order)[2:4]
as.numeric(paste0(default_model_fit1$call$order)[2:4])
Arima(default_model_fit1$x,xreg = LS(Z, 45),  order = as.numeric(paste0(default_model_fit1$call$order)[2:4]),
seasonal = as.numeric(paste0(default_model_fit1$call$seasonal)[2:4]),
include.mean = FALSE, method = 'ML',
fixed = c(coef(default_model_fit1), NA))
detect_outlier <- function(default_model, t_outlier, type = c("AO", "LS")) {
type <- match.arg(type)
# Extract the time series and its starting time from the default model
y <- default_model$x
outlier_time <- time(y)[t_outlier]  # Find the time corresponding to the outlier index
# Get the year and month using the get_time function
time_parts <- get_time(outlier_time)
year <- time_parts[1]
month <- sprintf("%02d", time_parts[2])  # Format month to be 2 digits
# Create the name for the new variable based on outlier type and time
var_name <- paste0(type, year, ".", month)
# Generate the regression variable based on outlier type
reg_var <- if (type == "AO") OA(y, t_outlier) else LS(y, t_outlier)
names(reg_var) <- var_name  # Assign the dynamically created name to the variable
# Fit the RegARIMA model with the new regression variable
fit <- Arima(y, order = as.numeric(paste0(default_model$call$order)[2:4]),
seasonal =as.numeric(paste0(default_model$call$order)[2:4]),
include.mean = FALSE, xreg = reg_var,
method = 'ML',
fixed = c(coef(default_model_fit1), NA))
# Extract the coefficient and standard error for the outlier variable
coef_outlier <- coef(fit)[var_name]
se_outlier <- sqrt(diag(fit$var.coef))[var_name]
# Calculate the t-value
t_value <- coef_outlier / se_outlier
return(list(t_value = t_value, variable_name = var_name))
}
Arima(default_model_fit1$x,xreg = LS(Z, 45),  order = as.numeric(paste0(default_model_fit1$call$order)[2:4]),
seasonal = as.numeric(paste0(default_model_fit1$call$seasonal)[2:4]),
include.mean = FALSE, method = 'ML',
fixed = c(coef(default_model_fit1), NA))
detect_outlier(default_model_fit1,127, "LS")
default_model = default_model_fit1
type = 'LS'
t_outlier = 127
type <- match.arg(type)
# Extract the time series and its starting time from the default model
y <- default_model$x
outlier_time <- time(y)[t_outlier]  # Find the time corresponding to the outlier index
# Get the year and month using the get_time function
time_parts <- get_time(outlier_time)
year <- time_parts[1]
month <- sprintf("%02d", time_parts[2])  # Format month to be 2 digits
# Create the name for the new variable based on outlier type and time
var_name <- paste0(type, year, ".", month)
# Generate the regression variable based on outlier type
reg_var <- if (type == "AO") OA(y, t_outlier) else LS(y, t_outlier)
names(reg_var) <- var_name  # Assign the dynamically created name to the variable
# Fit the RegARIMA model with the new regression variable
fit <- Arima(y, order = as.numeric(paste0(default_model$call$order)[2:4]),
seasonal =as.numeric(paste0(default_model$call$order)[2:4]),
include.mean = FALSE, xreg = reg_var,
method = 'ML',
fixed = c(coef(default_model_fit1), NA))
# Extract the coefficient and standard error for the outlier variable
coef_outlier <- coef(fit)[var_name]
se_outlier <- sqrt(diag(fit$var.coef))[var_name]
# Calculate the t-value
t_value <- coef_outlier / se_outlier
coef_outlier
var_name
coef(fit)
reg_var
# Extract the time series and its starting time from the default model
y <- default_model$x
outlier_time <- time(y)[t_outlier]  # Find the time corresponding to the outlier index
# Get the year and month using the get_time function
time_parts <- get_time(outlier_time)
year <- time_parts[1]
month <- sprintf("%02d", time_parts[2])  # Format month to be 2 digits
# Create the name for the new variable based on outlier type and time
var_name <- paste0(type, year, ".", month)
# Generate the regression variable based on outlier type
reg_var <- if (type == "AO") OA(y, t_outlier) else LS(y, t_outlier)
reg_var <- cbind(var_name = reg_var) # Assign the dynamically created name to the variable
# Fit the RegARIMA model with the new regression variable
fit <- Arima(y, order = as.numeric(paste0(default_model$call$order)[2:4]),
seasonal =as.numeric(paste0(default_model$call$order)[2:4]),
include.mean = FALSE, xreg = reg_var,
method = 'ML',
fixed = c(coef(default_model_fit1), NA))
# Extract the coefficient and standard error for the outlier variable
coef_outlier <- coef(fit)[var_name]
se_outlier <- sqrt(diag(fit$var.coef))[var_name]
reg_var
coef(fit)
paste(var_name)
# Extract the time series and its starting time from the default model
y <- default_model$x
outlier_time <- time(y)[t_outlier]  # Find the time corresponding to the outlier index
# Get the year and month using the get_time function
time_parts <- get_time(outlier_time)
year <- time_parts[1]
month <- sprintf("%02d", time_parts[2])  # Format month to be 2 digits
# Create the name for the new variable based on outlier type and time
var_name <- paste0(type, year, ".", month)
# Generate the regression variable based on outlier type
reg_var <- if (type == "AO") OA(y, t_outlier) else LS(y, t_outlier)
reg_var <- cbind(reg_var) # Assign the dynamically created name to the variable
colnames(reg_var) <- var_name
# Fit the RegARIMA model with the new regression variable
fit <- Arima(y, order = as.numeric(paste0(default_model$call$order)[2:4]),
seasonal =as.numeric(paste0(default_model$call$order)[2:4]),
include.mean = FALSE, xreg = reg_var,
method = 'ML',
fixed = c(coef(default_model_fit1), NA))
# Extract the coefficient and standard error for the outlier variable
coef_outlier <- coef(fit)[var_name]
se_outlier <- sqrt(diag(fit$var.coef))[var_name]
# Calculate the t-value
t_value <- coef_outlier / se_outlier
coef(fit)
fit$var.coef
detect_outlier <- function(default_model, t_outlier, type = c("AO", "LS")) {
type <- match.arg(type)
# Extract the time series and its starting time from the default model
y <- default_model$x
outlier_time <- time(y)[t_outlier]  # Find the time corresponding to the outlier index
# Get the year and month using the get_time function
time_parts <- get_time(outlier_time)
year <- time_parts[1]
month <- sprintf("%02d", time_parts[2])  # Format month to be 2 digits
# Create the name for the new variable based on outlier type and time
var_name <- paste0(type, year, ".", month)
# Generate the regression variable based on outlier type
reg_var <- if (type == "AO") OA(y, t_outlier) else LS(y, t_outlier)
reg_var <- cbind(reg_var) # Assign the dynamically created name to the variable
colnames(reg_var) <- var_name
# Fit the RegARIMA model with the new regression variable
fit <- Arima(y, order = as.numeric(paste0(default_model$call$order)[2:4]),
seasonal =as.numeric(paste0(default_model$call$order)[2:4]),
include.mean = FALSE, xreg = reg_var,
method = 'ML',
fixed = c(coef(default_model_fit1), NA))
# Extract the coefficient and standard error for the outlier variable
coef_outlier <- coef(fit)[var_name]
se_outlier <- sqrt(diag(fit$var.coef))[var_name]
# Calculate the t-value
t_value <- coef_outlier / se_outlier
return(list(t_value = t_value, variable_name = var_name))
}
detect_outlier(default_model_fit1,127, "LS")
names(t_value) <- var_name
t_value
detect_outlier <- function(default_model, t_outlier, type = c("AO", "LS")) {
type <- match.arg(type)
# Extract the time series and its starting time from the default model
y <- default_model$x
outlier_time <- time(y)[t_outlier]  # Find the time corresponding to the outlier index
# Get the year and month using the get_time function
time_parts <- get_time(outlier_time)
year <- time_parts[1]
month <- sprintf("%02d", time_parts[2])  # Format month to be 2 digits
# Create the name for the new variable based on outlier type and time
var_name <- paste0(type, year, ".", month)
# Generate the regression variable based on outlier type
reg_var <- if (type == "AO") OA(y, t_outlier) else LS(y, t_outlier)
reg_var <- cbind(reg_var) # Assign the dynamically created name to the variable
colnames(reg_var) <- var_name
# Fit the RegARIMA model with the new regression variable
fit <- Arima(y, order = as.numeric(paste0(default_model$call$order)[2:4]),
seasonal =as.numeric(paste0(default_model$call$order)[2:4]),
include.mean = FALSE, xreg = reg_var,
method = 'ML',
fixed = c(coef(default_model_fit1), NA))
# Extract the coefficient and standard error for the outlier variable
coef_outlier <- coef(fit)[var_name]
se_outlier <- sqrt(diag(fit$var.coef))[var_name]
# Calculate the t-value
t_value <- coef_outlier / se_outlier
names(t_value) <- var_name
return(t_value)
}
detect_outlier(default_model_fit1,127, "LS")
for(i in 1:(length(Z))){
ress_t = detect_outlier(default_model_fit1, i, "LS")
if(ress_t>3.88){
print(ress_t)
}
}
for(i in 2:(length(Z))){
ress_t = detect_outlier(default_model_fit1, i, "LS")
if(ress_t>3.88){
print(ress_t)
}
}
for(i in 2:(length(Z)-1)){
ress_t = detect_outlier(default_model_fit1, i, "LS")
if(ress_t>3.88){
print(ress_t)
}
}
for(i in 3:(length(Z)-1)){
ress_t = detect_outlier(default_model_fit1, i, "LS")
if(ress_t>3.88){
print(ress_t)
}
}
month
sprintf("%02f", 2.0)
sprintf("%02a", 2.0)
sprintf("%02e", 2.0)
sprintf("%02g", 2.0)
detect_outlier <- function(default_model, t_outlier, type = c("AO", "LS")) {
type <- match.arg(type)
# Extract the time series and its starting time from the default model
y <- default_model$x
outlier_time <- time(y)[t_outlier]  # Find the time corresponding to the outlier index
# Get the year and month using the get_time function
time_parts <- get_time(outlier_time)
year <- time_parts[1]
month <- sprintf("%02g", time_parts[2])  # Format month to be 2 digits
# Create the name for the new variable based on outlier type and time
var_name <- paste0(type, year, ".", month)
# Generate the regression variable based on outlier type
reg_var <- if (type == "AO") OA(y, t_outlier) else LS(y, t_outlier)
reg_var <- cbind(reg_var) # Assign the dynamically created name to the variable
colnames(reg_var) <- var_name
# Fit the RegARIMA model with the new regression variable
fit <- Arima(y, order = as.numeric(paste0(default_model$call$order)[2:4]),
seasonal =as.numeric(paste0(default_model$call$order)[2:4]),
include.mean = FALSE, xreg = reg_var,
method = 'ML',
fixed = c(coef(default_model_fit1), NA))
# Extract the coefficient and standard error for the outlier variable
coef_outlier <- coef(fit)[var_name]
se_outlier <- sqrt(diag(fit$var.coef))[var_name]
# Calculate the t-value
t_value <- coef_outlier / se_outlier
names(t_value) <- var_name
return(t_value)
}
for(i in 3:(length(Z)-1)){
ress_t = detect_outlier(default_model_fit1, i, "LS")
if(ress_t>3.88){
print(ress_t)
}
}
for(i in 2:(length(Z)-1)){
ress_t = detect_outlier(default_model_fit1, i, "LS")
if(ress_t>3.88){
print(ress_t)
}
}
for(i in 2:(length(Z)-1)){
ress_t = detect_outlier(default_model_fit1, i, "AO")
if(ress_t>3.88){
print(ress_t)
}
}
for(i in 3:(length(Z)-1)){
ress_t = detect_outlier(default_model_fit1, i, "LS")
if(ress_t>3.88){
print(ress_t)
}
}
for(i in 2:(length(Z)-1)){
ress_t = detect_outlier(default_model_fit1, i, "AO")
if(ress_t>3.88){
print(ress_t)
}
}
