foo = outlier_t_value(model, i, outliertype)
tvalue = foo$tvalue
time_point = foo$time_point
if(tvalue > tcritical){
print(paste(time_point, tvalue))
if(tvalue>max_tvalue){
max_tvalue = tvalue
ind_max_tvalue = i
type_max_tvalue = outliertype
}
}
}
}
if(type_max_tvalue == "AO"){
return(AO(y, ind_max_tvalue))
}
if(type_max_tvalue == "LS"){
return(LS(y, ind_max_tvalue))
}
return(NULL)
}
forward_pass(default_model, tcritical = 3.88)
source("~/Documents/Projects/X-13-ARIMA-SEATS-Model-for-Seasonal-Adjustment/code/helper_functions.r")
forward_pass(default_model, tcritical = 3.88)
View(X)
colnames(X)
outlier_t_value <- function(model, t, type = c("AO, LS")){
y = model$x
X = model$xreg
model_order = eval(model$call$order)
model_seasonal = eval(model$call$seasonal)
new_variable = NULL
if(type == 'AO'){
new_variable = AO(y, t)
}
else if(type == "LS"){
new_variable = LS(y, t)
}
X = cbind(X, new_variable)
if(abs(det(t(X) %*% X)) < 1e-10){
return(1)
}
fit = Arima(y, order = model_order,
seasonal = model_seasonal,
xreg = X,
include.mean = FALSE, method = 'ML',
fixed = c(coef(model), rep(NA, dim(X)[2])))
ind = length(fit$coef)
ind2 = dim(fit$var.coef)[1]
return(list(tvalue = abs((fit$coef)[ind]) / sqrt((fit$var.coef)[ind2, ind2]), time_point = colnames(X)[dim(X)[2]]) )
}
forward_pass <- function(model, types = c("AO", "LS"), tcritical=3.88){
y = model$x
n = length(y)
max_tvalue = 0
ind_max_tvalue = NULL
type_max_tvalue = NULL
for(outliertype in types){
for(i in 1:n){
foo = outlier_t_value(model, i, outliertype)
tvalue = foo$tvalue
time_point = foo$time_point
if(tvalue > tcritical){
print(paste(time_point, tvalue))
if(tvalue>max_tvalue){
max_tvalue = tvalue
ind_max_tvalue = i
type_max_tvalue = outliertype
}
}
}
}
if(type_max_tvalue == "AO"){
return(AO(y, ind_max_tvalue))
}
if(type_max_tvalue == "LS"){
return(LS(y, ind_max_tvalue))
}
return(NULL)
}
source("~/Documents/Projects/X-13-ARIMA-SEATS-Model-for-Seasonal-Adjustment/code/helper_functions.r")
forward_pass(default_model, tcritical = 3.88)
y = model$x
n = length(y)
max_tvalue = 0
ind_max_tvalue = NULL
type_max_tvalue = NULL
for(outliertype in types){
for(i in 1:n){
foo = outlier_t_value(model, i, outliertype)
tvalue = foo$tvalue
time_point = foo$time_point
if(tvalue > tcritical){
print(paste(time_point, tvalue))
if(tvalue>max_tvalue){
max_tvalue = tvalue
ind_max_tvalue = i
type_max_tvalue = outliertype
}
}
}
}
types = c("AO", "LS"), tcritical=3.88
types = c("AO", "LS")
tcritical=3.88
y = model$x
n = length(y)
max_tvalue = 0
ind_max_tvalue = NULL
type_max_tvalue = NULL
for(outliertype in types){
for(i in 1:n){
foo = outlier_t_value(model, i, outliertype)
tvalue = foo$tvalue
time_point = foo$time_point
if(tvalue > tcritical){
print(paste(time_point, tvalue))
if(tvalue>max_tvalue){
max_tvalue = tvalue
ind_max_tvalue = i
type_max_tvalue = outliertype
}
}
}
}
source("~/Documents/Projects/X-13-ARIMA-SEATS-Model-for-Seasonal-Adjustment/code/helper_functions.r")
forward_pass(default_model, tcritical = 3.88)
curr_outlier = forward_pass(default_model, tcritical = 3.88)
default_model = Arima(Z,xreg = NULL  order = c(0,1,1),seasonal = c(0,1,1),
?arima
default_model = Arima(Z,xreg = NLL,  order = c(0,1,1),seasonal = c(0,1,1),
include.mean = F,  method = 'ML',  lambda = NULL)
default_model = Arima(Z,xreg = NULL,  order = c(0,1,1),seasonal = c(0,1,1),
include.mean = F,  method = 'ML',  lambda = NULL)
default_model = Arima(Z,  order = c(0,1,1),seasonal = c(0,1,1), xreg = NULL,
include.mean = F,  method = 'ML',  lambda = NULL)
default_model
dim(NULL)
source("~/Documents/Projects/X-13-ARIMA-SEATS-Model-for-Seasonal-Adjustment/code/helper_functions.r")
curr_outlier = forward_pass(default_model, tcritical = 3.88)
y = model$x
X = xreg
nreg = ifelse(is.null(xreg) ,  0, dim(xreg)[2])
xreg = NULL
y = model$x
X = xreg
nreg = ifelse(is.null(xreg) ,  0, dim(xreg)[2])
ncoeff = length(model$coef) - nreg
model_order = eval(model$call$order)
model_seasonal = eval(model$call$seasonal)
new_variable = NULL
if(type == 'AO'){
new_variable = AO(y, t)
}
type == 'AO'
if(type == 'AO'){
new_variable = AO(y, t)
}
new_variable = AO(y, t)
X = cbind(X, new_variable)
if(abs(det(t(X) %*% X)) < 1e-10){
return(list(tvalue = 0, time_point =colnames(X)[dim(X)[2]] ))
}
fit = Arima(y, order = model_order,
seasonal = model_seasonal,
xreg = X,
include.mean = FALSE, method = 'ML',
fixed = c(coef(model)[1:ncoeff], rep(NA, nreg + 1)))
ind = length(fit$coef)
ind2 = dim(fit$var.coef)[1]
return(list(tvalue = abs((fit$coef)[ind]) / sqrt((fit$var.coef)[ind2, ind2]), time_point = colnames(X)[dim(X)[2]]) )
list(tvalue = abs((fit$coef)[ind]) / sqrt((fit$var.coef)[ind2, ind2]), time_point = colnames(X)[dim(X)[2]])
y = model$x
n = length(y)
max_tvalue = 0
ind_max_tvalue = NULL
type_max_tvalue = NULL
for(outliertype in types){
for(i in 1:n){
foo = outlier_t_value(model, i, outliertype)
tvalue = foo$tvalue
time_point = foo$time_point
if(tvalue > tcritical){
print(paste(time_point, tvalue))
if(tvalue>max_tvalue){
max_tvalue = tvalue
ind_max_tvalue = i
type_max_tvalue = outliertype
}
}
}
}
y = model$x
X = xreg
nreg = ifelse(is.null(xreg) ,  0, dim(xreg)[2])
ncoeff = length(model$coef) - nreg
model_order = eval(model$call$order)
model_seasonal = eval(model$call$seasonal)
new_variable = NULL
new_variable = AO(y, t)
X = cbind(X, new_variable)
if(abs(det(t(X) %*% X)) < 1e-10){
return(list(tvalue = 0, time_point =colnames(X)[dim(X)[2]] ))
}
fit = Arima(y, order = model_order,
seasonal = model_seasonal,
xreg = X,
include.mean = FALSE, method = 'ML',
fixed = c(coef(model)[1:ncoeff], rep(NA, nreg + 1)))
ind = length(fit$coef)
ind2 = dim(fit$var.coef)[1]
list(tvalue = abs((fit$coef)[ind]) / sqrt((fit$var.coef)[ind2, ind2]), time_point = colnames(X)[dim(X)[2]])
foo = outlier_t_value(model, i, outliertype)
foo = outlier_t_value(model, i, outliertype)
outlier_t_value(model, i, outliertype)
outlier_t_value(model, i, outliertype)
curr_outlier = forward_pass(default_model,xreg = NULL, types = c("AO", "LS"),
tcritical = 3.88)
source("~/Documents/Projects/X-13-ARIMA-SEATS-Model-for-Seasonal-Adjustment/code/helper_functions.r")
curr_outlier = forward_pass(default_model,xreg = NULL, types = c("AO", "LS"),
tcritical = 3.88)
curr_outlier = forward_pass(default_model,xreg = NULL, types = c("AO", "LS"),
tcritical = 3.88)
outlier_t_value(model, i, outliertype, xreg)
outlier_t_value(model, i,xreg, outliertype )
source("~/Documents/Projects/X-13-ARIMA-SEATS-Model-for-Seasonal-Adjustment/code/helper_functions.r")
curr_outlier = forward_pass(default_model,xreg = NULL, types = c("AO", "LS"),
tcritical = 3.88)
curr_outlier = forward_pass(default_model,xreg = Xreg, types = c("AO", "LS"),
tcritical = 3.88)
curr_outlier = forward_pass(default_model,xreg = Xreg, types = c("AO", "LS"),
tcritical = 3.88)
Xreg = NULL
default_model = Arima(Z,  order = c(0,1,1),seasonal = c(0,1,1), xreg = Xreg,
include.mean = F,  method = 'ML',  lambda = NULL)
default_model
curr_outlier = forward_pass(default_model,xreg = Xreg, types = c("AO", "LS"),
tcritical = 3.88)
while(! is.null(curr_outlier)){
Xreg = cbind(Xreg, curr_outlier)
curr_outlier = forward_pass(default_model,xreg = Xreg, types = c("AO", "LS"),
tcritical = 3.88)
}
Xreg
coef(model)[1:ncoeff]
coef(model)[1:ncoeff], rep(NA, nreg + 1))
coef(model)[1:ncoeff], rep(NA, nreg + 1)
c(coef(model)[1:ncoeff], rep(NA, nreg + 1)))
c(coef(model)[1:ncoeff], rep(NA, nreg + 1))
nreg = ifelse(is.null(xreg) ,  0, dim(xreg)[2])
xreg
eval(model$coef)
eval(model$var.coef)
eval(model$arma)
eval(model$call$order)
eval(model$call$order)[-2]
sum(c(eval(model$call$order)[-2] , eval(model$call$seasonal[-2])))
sum(c(eval(model$call$order)[-2] , eval(model$call$seasonal)[-2]))
source("~/Documents/Projects/X-13-ARIMA-SEATS-Model-for-Seasonal-Adjustment/code/helper_functions.r")
source("~/Documents/Projects/X-13-ARIMA-SEATS-Model-for-Seasonal-Adjustment/code/helper_functions.r")
Xreg = NULL
default_model = Arima(Z,  order = c(0,1,1),seasonal = c(0,1,1), xreg = Xreg,
include.mean = F,  method = 'ML',  lambda = NULL)
default_model
curr_outlier = forward_pass(default_model,xreg = Xreg, types = c("AO", "LS"),
tcritical = 3.88)
while(! is.null(curr_outlier)){
Xreg = cbind(Xreg, curr_outlier)
curr_outlier = forward_pass(default_model,xreg = Xreg, types = c("AO", "LS"),
tcritical = 3.88)
}
source("~/Documents/Projects/X-13-ARIMA-SEATS-Model-for-Seasonal-Adjustment/code/helper_functions.r")
Xreg = NULL
default_model = Arima(Z,  order = c(0,1,1),seasonal = c(0,1,1), xreg = Xreg,
include.mean = F,  method = 'ML',  lambda = NULL)
default_model
print("forward pass 1")
curr_outlier = forward_pass(default_model,xreg = Xreg, types = c("AO", "LS"),
tcritical = 3.88)
k = 2
while(! is.null(curr_outlier)){
Xreg = cbind(Xreg, curr_outlier)
print(paste("forward pass", k))
k = k +1
curr_outlier = forward_pass(default_model,xreg = Xreg, types = c("AO", "LS"),
tcritical = 3.88)
}
Xreg
diag(model$var.coef)
backward_pass <-  function(model, xreg=NULL, types = c("AO", "LS"), tcritical=3.88){
y = model$x
X = xreg
nreg = ifelse(is.null(xreg) ,  0, dim(xreg)[2])
ncoeff = sum(c(eval(model$call$order)[-2] , eval(model$call$seasonal)[-2]))
model_order = eval(model$call$order)
model_seasonal = eval(model$call$seasonal)
fit = Arima(y, order = model_order,
seasonal = model_seasonal,
xreg = X,
include.mean = FALSE, method = 'ML',
fixed = c(coef(model)[1:ncoeff], rep(NA, nreg)))
betas = fit$coef[-c(1:ncoeff)]
se_betas = diag(sqrt(fit$var.coef))
tvalues  = betas/se_betas
min_tvalue = 1e8
min_ind = NULL
for(i in 1:length(tvalues)){
if(grepl("^(AO|LS)(1[6-9][0-9]|20[0-9][0-9])\\.(0[1-9]|1[0-2])$",
colnames(X)[i])){
if(tvalues[i] < tcritical ){
print(paste(colnames(X)[i], tvalues[i]))
if( tvalues[i] < min_tvalue ){
min_tvalue = tvalues[i]
min_ind = i
}
}
}
}
return(min_ind)
}
source("~/Documents/Projects/X-13-ARIMA-SEATS-Model-for-Seasonal-Adjustment/code/helper_functions.r")
source("~/Documents/Projects/X-13-ARIMA-SEATS-Model-for-Seasonal-Adjustment/code/helper_functions.r")
backward_pass(default_model, Xreg, tcritical = 3.88)
source("~/Documents/Projects/X-13-ARIMA-SEATS-Model-for-Seasonal-Adjustment/code/helper_functions.r")
backward_pass(default_model, Xreg, tcritical = 3.88)
backward_pass(default_model, Xreg, tcritical = 1.88)
backward_pass(default_model, Xreg, tcritical = 0.88)
Xreg
colnames(Xreg)
grepl("^(AO|LS)(1[6-9][0-9]|20[0-9][0-9])\\.(0[1-9]|1[0-2])$",
colnames(X)[i])
tvalues
y = model$x
X = xreg
nreg = ifelse(is.null(xreg) ,  0, dim(xreg)[2])
ncoeff = sum(c(eval(model$call$order)[-2] , eval(model$call$seasonal)[-2]))
model_order = eval(model$call$order)
model_seasonal = eval(model$call$seasonal)
fit = Arima(y, order = model_order,
seasonal = model_seasonal,
xreg = X,
include.mean = FALSE, method = 'ML',
fixed = c(coef(model)[1:ncoeff], rep(NA, nreg)))
betas = fit$coef[-c(1:ncoeff)]
se_betas = sqrt(diag(fit$var.coef))
tvalues  = betas/se_betas
fit$coef[-c(1:ncoeff)]
fit$coef
fit = Arima(y, order = model_order,
seasonal = model_seasonal,
xreg = X,
include.mean = FALSE, method = 'ML',
fixed = c(coef(model)[1:ncoeff], rep(NA, nreg)))
fit
xreg
X = Xreg
nreg = ifelse(is.null(xreg) ,  0, dim(xreg)[2])
ncoeff = sum(c(eval(model$call$order)[-2] , eval(model$call$seasonal)[-2]))
model_order = eval(model$call$order)
model_seasonal = eval(model$call$seasonal)
fit = Arima(y, order = model_order,
seasonal = model_seasonal,
xreg = X,
include.mean = FALSE, method = 'ML',
fixed = c(coef(model)[1:ncoeff], rep(NA, nreg)))
ncoeff
nreg
xreg = Xreg
y = model$x
X = xreg
nreg = ifelse(is.null(xreg) ,  0, dim(xreg)[2])
ncoeff = sum(c(eval(model$call$order)[-2] , eval(model$call$seasonal)[-2]))
model_order = eval(model$call$order)
model_seasonal = eval(model$call$seasonal)
fit = Arima(y, order = model_order,
seasonal = model_seasonal,
xreg = X,
include.mean = FALSE, method = 'ML',
fixed = c(coef(model)[1:ncoeff], rep(NA, nreg)))
betas = fit$coef[-c(1:ncoeff)]
betas = fit$coef[-c(1:ncoeff)]
fit$coe
fit$coef[-c(1:ncoeff)]
betas = fit$coef[-c(1:ncoeff)]
se_betas = sqrt(diag(fit$var.coef))
tvalues  = betas/se_betas
min_tvalue = 1e8
min_ind = NULL
for(i in 1:length(tvalues)){
if(grepl("^(AO|LS)(1[6-9][0-9]|20[0-9][0-9])\\.(0[1-9]|1[0-2])$",
colnames(X)[i])){
if(tvalues[i] < tcritical ){
print(paste(colnames(X)[i], tvalues[i]))
if( tvalues[i] < min_tvalue ){
min_tvalue = tvalues[i]
min_ind = i
}
}
}
}
min_ind
source("~/Documents/Projects/X-13-ARIMA-SEATS-Model-for-Seasonal-Adjustment/code/helper_functions.r")
backward_pass(default_model, Xreg, tcritical = 0.88)
backward_pass(default_model, Xreg, tcritical = -0.88)
tvalues
backward_pass(default_model, Xreg, tcritical = 5)
k = 1
while(T){
print(paste("backward_pass", k))
k = k+1
ind = backward_pass(default_model, Xreg, tcritical = 3.88)
if(is.null(ind)){
break
}
else{
Xreg = Xreg[,-ind]
}
}
Xreg
k = 1
while(T){
print(paste("backward_pass", k))
k = k+1
ind = backward_pass(default_model, Xreg, tcritical = 5)
if(is.null(ind)){
break
}
else{
Xreg = Xreg[,-ind]
}
}
default_model
print("forward pass 1")
curr_outlier = forward_pass(default_model,xreg = Xreg, types = c("AO", "LS"),
tcritical = 3.88)
k = 2
while(! is.null(curr_outlier)){
Xreg = cbind(Xreg, curr_outlier)
print(paste("forward pass", k))
k = k +1
curr_outlier = forward_pass(default_model,xreg = Xreg, types = c("AO", "LS"),
tcritical = 3.88)
}
Xreg = NULL
default_model = Arima(Z,  order = c(0,1,1),seasonal = c(0,1,1), xreg = Xreg,
include.mean = F,  method = 'ML',  lambda = NULL)
default_model
print("forward pass 1")
curr_outlier = forward_pass(default_model,xreg = Xreg, types = c("AO", "LS"),
tcritical = 3.88)
k = 2
while(! is.null(curr_outlier)){
Xreg = cbind(Xreg, curr_outlier)
print(paste("forward pass", k))
k = k +1
curr_outlier = forward_pass(default_model,xreg = Xreg, types = c("AO", "LS"),
tcritical = 3.88)
}
k = 1
k = 1
while(T){
print(paste("backward_pass", k))
k = k+1
ind = backward_pass(default_model, Xreg, tcritical = 4.2)
if(is.null(ind)){
break
}
else{
Xreg = Xreg[,-ind]
}
}
Xreg
default_model = Arima(Z,  order = c(0,1,1),seasonal = c(0,1,1), xreg = Xreg,
include.mean = F,  method = 'ML',  lambda = NULL)
default_model
print("forward pass 1")
curr_outlier = forward_pass(default_model,xreg = Xreg, types = c("AO", "LS"),
tcritical = 3.88)
k = 2
while(! is.null(curr_outlier)){
Xreg = cbind(Xreg, curr_outlier)
print(paste("forward pass", k))
k = k +1
curr_outlier = forward_pass(default_model,xreg = Xreg, types = c("AO", "LS"),
tcritical = 3.88)
}
k = 1
while(T){
print(paste("backward_pass", k))
k = k+1
ind = backward_pass(default_model, Xreg, tcritical = 3.88)
if(is.null(ind)){
print("outlier detection is done")
break
}
else{
Xreg = Xreg[,-ind]
}
}
source("~/Documents/Projects/X-13-ARIMA-SEATS-Model-for-Seasonal-Adjustment/code/helper_functions.r")
Xreg
# outliers identified from the default model
print(colnames(Xreg))
setwd("~/Documents/Projects/X-13-ARIMA-SEATS-Model-for-Seasonal-Adjustment")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
# Load Diwali dates (Assuming 'diwali.csv' is available in the 'data' directory)
ddates <- read.csv('data/diwali.csv')
# Load Diwali dates (Assuming 'diwali.csv' is available in the 'data' directory)
ddates <- read.csv('data/diwali.csv')
read.csv('data/diwali.csv')
read.csv('data/diwali.csv')
read.csv('data/diwali.csv')
